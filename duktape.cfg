[n.global]
output = src/duk/private/duktape

[n.prepare]
download = "https://duktape.org/duktape-2.3.0.tar.xz"
execute = """
cd src/duk/private/duktape && tar xf duktape-2.3.0.tar.xz duktape-2.3.0/src --strip-components=1
"""

[n.include]
src/duk/private/duktape/src

[duk_config.h]
preprocess = true
search.export = """
#define DUK_EXTERNAL_DECL  __attribute__ ((visibility("default"))) extern
"""

replace.export = """
#define DUK_EXTERNAL_DECL  
"""
flags = "--prefix:duk_ --nep1"

[duktape.h]
flags = "--prefix:duk_ --nep1"
preprocess = true
defines = true
compile = src/duk/private/duktape/src/duktape.c
rename = "duktape_sys.nim"

[duktape_sys.nim]
prepend = """
import ../../ctx_val_proc
type
  Context* = distinct pointer
  BoolT* = distinct cint
  IdxT* = int
  UidxT* = uint
  UarridxT* = uint
  ErrcodeT* = int
  CodepointT* = distinct int
  UcodepointT* = distinct uint
  FloatT = cfloat
  DoubleT = cdouble
  SizeT = cint
  RetT* = distinct cint
  StackPtr* = tuple[ctx: Context, idx: IdxT]
"""


search.bool = "boolT"
replace.bool = "BoolT"
search.uidx = "uidxT"
replace.uidx = "UidxT"
search.idx = "idxT"
replace.idx = "IdxT"
search.uarridx = "uarridxT"
replace.uarridx = "UarridxT"
search.errcode = "errcodeT"
replace.errcode = "ErrcodeT"
search.ucodepoint = "ucodepointT"
replace.ucodepoint = "UcodepointT"
search.codepoint = "codepointT"
replace.codepoint = "CodepointT"
search.ret = "retT"
replace.ret = "RetT"

search.small_uint = "SmallUintT"
replace.small_uint = "cuint"
search.small_int = "SmallIntT"
replace.small_int = "cint"
search.float = "floatT"
replace.float = "cfloat"
search.double = "doubleT"
replace.double = "cdouble"
search.size = "sizeT"
replace.size = "cint"
search.uint = "uintT"
replace.uint = "cuint"
search.int = "intT"
replace.int = "cint"
search.uint8 = "uint8T"
replace.uint8 = "uint8"
search.int8 = "int8T"
replace.int8 = "int8"
search.uint16 = "uint16T"
replace.uint16 = "uint16"
search.int16 = "int16T"
replace.int16 = "int16"
search.uint32 = "uint32T"
replace.uint32 = "uint32"
search.int32 = "int32T"
replace.int32 = "int32"
search.uint64 = "uint64T"
replace.uint64 = "uint64"
search.int64 = "int64T"
replace.int64 = "int64"

search.redef = """
  ThreadState* {.importc: "duk_thread_state", header: headerduktape, bycopy.} = object

  MemoryFunctions* {.importc: "duk_memory_functions", header: headerduktape, bycopy.} = object

  FunctionListEntry* {.importc: "duk_function_list_entry", header: headerduktape,
                      bycopy.} = object

  NumberListEntry* {.importc: "duk_number_list_entry", header: headerduktape, bycopy.} = object

  TimeComponents* {.importc: "duk_time_components", header: headerduktape, bycopy.} = object

  ThreadState* = threadState
  MemoryFunctions* = memoryFunctions
  FunctionListEntry* = functionListEntry
  NumberListEntry* = numberListEntry
  TimeComponents* = timeComponents
"""
replace.redef = ""

search.ctx = "ptr Context"
replace.ctx = "Context"

search.va = """
proc errorVaRaw*(ctx: Context; errCode: ErrcodeT; filename: cstring; line: cint;
                fmt: cstring; ap: VaList) {.importc: "duk_error_va_raw",
                                        header: headerduktape.}
"""
replace.va = ""

search.va2 = """
proc pushVsprintf*(ctx: Context; fmt: cstring; ap: VaList): cstring {.
    importc: "duk_push_vsprintf", header: headerduktape.}
"""
replace.va2 = ""

search.va3 = """
proc pushErrorObjectVaRaw*(ctx: Context; errCode: ErrcodeT; filename: cstring;
                          line: cint; fmt: cstring; ap: VaList): IdxT {.
    importc: "duk_push_error_object_va_raw", header: headerduktape.}
"""
replace.va3 = ""

search.incc = "/src/.h"
replace.incc = "/src/duktape.h"

regex.stackptrpragma = """(proc ([\w`]+)\*\([^{]*?\)(?:\:\s*[\w`]+)?\s*\{\.)"""
replace.stackptrpragma = "$1 dukCtxPtrProc,"

regex.cfuncs = """(\w*Function\* = .*)"""
replace.cfuncs = "$1 {.cdecl.}"